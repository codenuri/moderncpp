#include <iostream>

int main()
{
	int x[3] = { 1,2,3 };

	// 배열의 주소와 배열의 요소의 주소를 잘 구별하세요

	int(*p1)[3] = &x; // 배열 x의 주소

	int* p2 = &x[0];  // 배열 x의 1번째 요소(x[0]) 의 주소


	// 현재 p1, p2 의 주소는 동일 하지만
	// 포인터변수가 어떤 타입 이냐에 따라 연산의 결과가 달라집니다.

	// + 연산시
	printf("%p, %p\n", p1, p1 + 1); // 100, 112
	printf("%p, %p\n", p2, p2 + 1); // 100, 104
		
	// * 연산시
	// p1 : int[3] (배열) 을 가리킴
	// p2 : int 를 가리킴

//	*p1 = 10;	// *(배열*) => 배열 인데,  배열 = 10 이므로 error
	
	(*p1)[0] = 10; // *(배열*)[0] => 배열[0] = 10 이므로 ok. 

	*p2 = 10;	// *(int*) => int 따라서 int = 10 이므로 ok

	// 배열 이름 x 를 직접 사용해서 요소에 접근할때는 
	x[0] = 0; // 이렇게 합니다.

	// p1, p2 를 각각 사용해서 요소에 접근하려면 아래 와 같습니다.
	(*p1)[0] = 0;
	p2[0] = 0;

	// 즉, x와 동일한 사용법으로 사용하려면 
	// "배열의 주소" 가 아니라 "배열의 1번째 요소의 주소" 가 필요 합니다

	// 그래서 C/C++ 에는 
	// "배열의 이름은 "배열의 주소가 아닌" 
	//                배열의 1번째 요소의 주소로 암시적 형변환 된다"
	// 는 문법이 있습니다.

	int* p3 = x; // int* p3 = &x[0] 의 의미 입니다.
				//            &x 가 아닙니다.
}
